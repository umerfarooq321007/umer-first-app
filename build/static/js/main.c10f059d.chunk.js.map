{"version":3,"sources":["hooks/use-input.js","UI/Input.js","components/BasicForm.js","App.js","index.js"],"names":["initialInputState","value","isTouched","inputStateReducer","state","action","type","useInput","validateValue","useReducer","inputState","dispatch","valueIsValid","hasError","isValid","valueChangeHandler","event","target","inputBlurHandler","reset","Input","props","className","id","onChange","onBlur","isNotEmpty","trim","isEmail","includes","BasicForm","firstNameValue","firstNameIsValid","firstNameHasError","firstNameChangeHandler","firstNameBlurHandler","resetFirstName","lastNameValue","lastNameIsValid","lastNameHasError","lastNameChangeHandler","lastNameBlurHandler","resetLastName","emailValue","emailIsValid","emailHasError","emailChangeHandler","emailBlurHandler","resetEmail","phoneValue","phoneIsValid","phoneHasError","phoneChangeHandler","phoneBlurHandler","resetPhone","formIsValid","firstNameClasses","lastNameClasses","emailClasses","phoneClasses","onSubmit","preventDefault","console","log","htmlFor","disabled","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.c10f059d.chunk.js","sourcesContent":["import { useReducer } from 'react';\n\nconst initialInputState = {\n  value: '',\n  isTouched: false,\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === 'INPUT') {\n    return { value: action.value, isTouched: state.isTouched };\n  }\n  if (action.type === 'BLUR') {\n    return { isTouched: true, value: state.value };\n  }\n  if (action.type === 'RESET') {\n    return { isTouched: false, value: '' };\n  }\n  return inputStateReducer;\n};\n\nconst useInput = (validateValue) => {\n  const [inputState, dispatch] = useReducer(\n    inputStateReducer,\n    initialInputState\n  );\n\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = (event) => {\n    dispatch({ type: 'INPUT', value: event.target.value });\n  };\n\n  const inputBlurHandler = (event) => {\n    dispatch({ type: 'BLUR' });\n  };\n\n  const reset = () => {\n    dispatch({ type: 'RESET' });\n  };\n\n  return {\n    value: inputState.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\n\nexport default useInput;\n","import React from 'react';\n\nimport './Input.css';\n\nconst Input = (props) => {\n\n  return <input\n    className='input'\n    id={'phone'}\n    value={props.value}\n    onChange={props.onChange}\n    onBlur={props.onBlur}\n  />;\n};\n\nexport default Input;","import useInput from '../hooks/use-input';\n\nimport Input from '../UI/Input';\n\nconst isNotEmpty = (value) => value.trim() !== '';\nconst isEmail = (value) => value.includes('@');\n\nconst BasicForm = (props) => {\n  const {\n    value: firstNameValue,\n    isValid: firstNameIsValid,\n    hasError: firstNameHasError,\n    valueChangeHandler: firstNameChangeHandler,\n    inputBlurHandler: firstNameBlurHandler,\n    reset: resetFirstName,\n  } = useInput(isNotEmpty);\n  const {\n    value: lastNameValue,\n    isValid: lastNameIsValid,\n    hasError: lastNameHasError,\n    valueChangeHandler: lastNameChangeHandler,\n    inputBlurHandler: lastNameBlurHandler,\n    reset: resetLastName,\n  } = useInput(isNotEmpty);\n  const {\n    value: emailValue,\n    isValid: emailIsValid,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail,\n  } = useInput(isEmail);\n\n  const {\n    value: phoneValue,\n    isValid: phoneIsValid,\n    hasError: phoneHasError,\n    valueChangeHandler: phoneChangeHandler,\n    inputBlurHandler: phoneBlurHandler,\n    reset: resetPhone,\n  } = useInput(isNotEmpty);\n\n  let formIsValid = false;\n\n  if (firstNameIsValid && lastNameIsValid && emailIsValid && phoneIsValid) {\n    formIsValid = true;\n  }\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (!formIsValid) {\n      return;\n    }\n\n    console.log('Submitted!');\n    console.log(firstNameValue, lastNameValue, emailValue);\n\n    resetFirstName();\n    resetLastName();\n    resetEmail();\n    resetPhone();\n  };\n\n  const firstNameClasses = firstNameHasError ? 'form-control invalid' : 'form-control';\n  const lastNameClasses = lastNameHasError ? 'form-control invalid' : 'form-control';\n  const emailClasses = emailHasError ? 'form-control invalid' : 'form-control';\n  const phoneClasses = phoneHasError ? 'form-control invalid' : 'form-control';\n  return (\n    <form onSubmit={submitHandler}>\n      <div className='control-group'>\n        <div className={firstNameClasses}>\n          <label htmlFor='name'>First Name</label>\n          <input\n            type='text'\n            id='name'\n            value={firstNameValue}\n            onChange={firstNameChangeHandler}\n            onBlur={firstNameBlurHandler}\n          />\n          {firstNameHasError && <p className=\"error-text\">Please enter a first name.</p>}\n        </div>\n        <div className={lastNameClasses}>\n          <label htmlFor='name'>Last Name</label>\n          <input\n            type='text'\n            id='name'\n            value={lastNameValue}\n            onChange={lastNameChangeHandler}\n            onBlur={lastNameBlurHandler}\n          />\n          {lastNameHasError && <p className=\"error-text\">Please enter a last name.</p>}\n        </div>\n      </div>\n      <div className='control-group'>\n        <div className={emailClasses}>\n          <label htmlFor='name'>E-Mail Address</label>\n          <input\n            type='text'\n            id='name'\n            value={emailValue}\n            onChange={emailChangeHandler}\n            onBlur={emailBlurHandler}\n          />\n          {emailHasError && <p className=\"error-text\">Please enter a valid email address.</p>}\n        </div>\n\n        <div className={phoneClasses}>\n          <label htmlFor='name'>Phone Number</label>\n          <Input \n            id={'phone'}\n            value={phoneValue}\n            onChange={phoneChangeHandler}\n            onBlur={phoneBlurHandler}\n          />\n          {phoneHasError && <p className=\"error-text\">Please enter a valid phone number.</p>}\n        </div>\n      </div>\n\n\n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n","import BasicForm from './components/BasicForm';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}